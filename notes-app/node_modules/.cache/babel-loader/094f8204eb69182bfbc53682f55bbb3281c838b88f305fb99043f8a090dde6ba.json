{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { api } from '../../api'; // Импортируем API с RTK Query\n\nconst initialState = {\n  notes: [],\n  trash: []\n};\nconst notesSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    // Дополнительные действия, если нужно\n  },\n  extraReducers: builder => {\n    // Используем хук API для обработки успешных запросов\n\n    // Получить все заметки\n    builder.addMatcher(api.endpoints.getNotes.matchFulfilled, (state, action) => {\n      state.notes = action.payload; // Получаем все заметки\n    });\n\n    // Добавить новую заметку\n    builder.addMatcher(api.endpoints.createNote.matchFulfilled, (state, action) => {\n      state.notes.push(action.payload); // Добавляем новую заметку в состояние\n    });\n\n    // Удалить заметку\n    builder.addMatcher(api.endpoints.deleteNote.matchFulfilled, (state, action) => {\n      state.notes = state.notes.filter(note => note.id !== action.payload); // Удаляем заметку из списка\n    });\n\n    // Обновить заметку\n    builder.addMatcher(api.endpoints.updateNote.matchFulfilled, (state, action) => {\n      const index = state.notes.findIndex(note => note.id === action.payload.id);\n      if (index !== -1) {\n        state.notes[index] = action.payload; // Обновляем заметку\n      }\n    });\n\n    // Переместить в корзину\n    builder.addMatcher(api.endpoints.moveToTrash.matchFulfilled, (state, action) => {\n      const note = state.notes.find(note => note.id === action.payload);\n      if (note) {\n        state.notes = state.notes.filter(note => note.id !== action.payload);\n        state.trash.push(note); // Перемещаем заметку в корзину\n      }\n    });\n\n    // Восстановить заметку из корзины\n    builder.addMatcher(api.endpoints.restoreNote.matchFulfilled, (state, action) => {\n      const note = state.trash.find(note => note.id === action.payload);\n      if (note) {\n        state.trash = state.trash.filter(note => note.id !== action.payload);\n        state.notes.push(note); // Восстанавливаем заметку\n      }\n    });\n\n    // Удалить заметку навсегда\n    builder.addMatcher(api.endpoints.deleteNoteForever.matchFulfilled, (state, action) => {\n      state.trash = state.trash.filter(note => note.id !== action.payload); // Удаляем заметку навсегда\n    });\n  }\n});\nexport const {\n  moveToTrash,\n  restoreNote,\n  deleteNoteForever\n} = notesSlice.actions;\nexport default notesSlice.reducer;","map":{"version":3,"names":["createSlice","api","initialState","notes","trash","notesSlice","name","reducers","extraReducers","builder","addMatcher","endpoints","getNotes","matchFulfilled","state","action","payload","createNote","push","deleteNote","filter","note","id","updateNote","index","findIndex","moveToTrash","find","restoreNote","deleteNoteForever","actions","reducer"],"sources":["C:/Users/User/Desktop/kur/notes-app/src/redux/slices/notesSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { api } from '../../api'; // Импортируем API с RTK Query\r\n\r\nconst initialState = {\r\n  notes: [],\r\n  trash: [],\r\n};\r\n\r\nconst notesSlice = createSlice({\r\n  name: 'notes',\r\n  initialState,\r\n  reducers: {\r\n    // Дополнительные действия, если нужно\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Используем хук API для обработки успешных запросов\r\n\r\n    // Получить все заметки\r\n    builder.addMatcher(api.endpoints.getNotes.matchFulfilled, (state, action) => {\r\n      state.notes = action.payload; // Получаем все заметки\r\n    });\r\n\r\n    // Добавить новую заметку\r\n    builder.addMatcher(api.endpoints.createNote.matchFulfilled, (state, action) => {\r\n      state.notes.push(action.payload); // Добавляем новую заметку в состояние\r\n    });\r\n\r\n    // Удалить заметку\r\n    builder.addMatcher(api.endpoints.deleteNote.matchFulfilled, (state, action) => {\r\n      state.notes = state.notes.filter(note => note.id !== action.payload); // Удаляем заметку из списка\r\n    });\r\n\r\n    // Обновить заметку\r\n    builder.addMatcher(api.endpoints.updateNote.matchFulfilled, (state, action) => {\r\n      const index = state.notes.findIndex(note => note.id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.notes[index] = action.payload; // Обновляем заметку\r\n      }\r\n    });\r\n\r\n    // Переместить в корзину\r\n    builder.addMatcher(api.endpoints.moveToTrash.matchFulfilled, (state, action) => {\r\n      const note = state.notes.find(note => note.id === action.payload);\r\n      if (note) {\r\n        state.notes = state.notes.filter(note => note.id !== action.payload);\r\n        state.trash.push(note); // Перемещаем заметку в корзину\r\n      }\r\n    });\r\n\r\n    // Восстановить заметку из корзины\r\n    builder.addMatcher(api.endpoints.restoreNote.matchFulfilled, (state, action) => {\r\n      const note = state.trash.find(note => note.id === action.payload);\r\n      if (note) {\r\n        state.trash = state.trash.filter(note => note.id !== action.payload);\r\n        state.notes.push(note); // Восстанавливаем заметку\r\n      }\r\n    });\r\n\r\n    // Удалить заметку навсегда\r\n    builder.addMatcher(api.endpoints.deleteNoteForever.matchFulfilled, (state, action) => {\r\n      state.trash = state.trash.filter(note => note.id !== action.payload); // Удаляем заметку навсегда\r\n    });\r\n  },\r\n});\r\n\r\nexport const { moveToTrash, restoreNote, deleteNoteForever } = notesSlice.actions;\r\n\r\nexport default notesSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}