{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\kur\\\\notes-app\\\\src\\\\pages\\\\NotesPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNote } from '../redux/slices/notesSlice'; // Redux действие для добавления заметки\nimport { useGetNotesQuery, useCreateNoteMutation } from '../api'; // Импортируем хуки из api.js\nimport { moveToTrash, restoreNote, deleteNoteForever } from '../redux/slices/notesSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotesPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const notes = useSelector(state => state.notes.notes); // Получаем заметки из Redux\n  const [newNoteContent, setNewNoteContent] = useState(''); // Состояние для новой заметки\n\n  const {\n    data: fetchedNotes,\n    error: fetchError,\n    isLoading: isLoadingNotes\n  } = useGetNotesQuery(); // Хук для загрузки заметок\n  const [createNote, {\n    error: createError,\n    isLoading: isCreating\n  }] = useCreateNoteMutation(); // Хук для добавления заметки\n\n  // Эффект для загрузки заметок при монтировании компонента\n  useEffect(() => {\n    if (fetchedNotes) {\n      fetchedNotes.forEach(note => {\n        dispatch(addNote(note)); // Добавляем загруженные заметки в Redux\n      });\n    }\n  }, [fetchedNotes, dispatch]);\n\n  // Функция для добавления заметки\n  const handleAddNote = async () => {\n    if (newNoteContent.trim()) {\n      // Проверяем, не пустая ли заметка\n      const note = {\n        content: newNoteContent\n      }; // Создаем заметку\n      try {\n        const addedNote = await createNote(note).unwrap(); // Добавляем заметку через RTK Query\n        dispatch(addNote(addedNote)); // Добавляем заметку в Redux\n        setNewNoteContent(''); // Очищаем поле ввода\n      } catch (error) {\n        console.error('Ошибка при добавлении заметки:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notes-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newNoteContent,\n        onChange: e => setNewNoteContent(e.target.value) // Обновляем состояние ввода\n        ,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0443\",\n        className: \"note-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddNote,\n        className: \"add-note-button\",\n        disabled: isCreating,\n        children: isCreating ? 'Добавление...' : 'Добавить заметку'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), isLoadingNotes && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043E\\u043A...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 26\n    }, this), \"  \", fetchError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0435 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043E\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"notes-list\",\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"note-item\",\n        children: [note.content, \"  \"]\n      }, note.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), createError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438 \\u0437\\u0430\\u043C\\u0435\\u0442\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(NotesPage, \"7sVFWMjLZZrAuEmPcL7g3T0ggF8=\", false, function () {\n  return [useDispatch, useSelector, useGetNotesQuery, useCreateNoteMutation];\n});\n_c = NotesPage;\nexport default NotesPage;\nvar _c;\n$RefreshReg$(_c, \"NotesPage\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","addNote","useGetNotesQuery","useCreateNoteMutation","moveToTrash","restoreNote","deleteNoteForever","jsxDEV","_jsxDEV","NotesPage","_s","dispatch","notes","state","newNoteContent","setNewNoteContent","data","fetchedNotes","error","fetchError","isLoading","isLoadingNotes","createNote","createError","isCreating","forEach","note","handleAddNote","trim","content","addedNote","unwrap","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","disabled","map","id","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/kur/notes-app/src/pages/NotesPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addNote } from '../redux/slices/notesSlice';  // Redux действие для добавления заметки\r\nimport { useGetNotesQuery, useCreateNoteMutation } from '../api';  // Импортируем хуки из api.js\r\nimport { moveToTrash, restoreNote, deleteNoteForever } from '../redux/slices/notesSlice';\r\n\r\nconst NotesPage = () => {\r\n  const dispatch = useDispatch();\r\n  const notes = useSelector((state) => state.notes.notes);  // Получаем заметки из Redux\r\n  const [newNoteContent, setNewNoteContent] = useState('');  // Состояние для новой заметки\r\n\r\n  const { data: fetchedNotes, error: fetchError, isLoading: isLoadingNotes } = useGetNotesQuery();  // Хук для загрузки заметок\r\n  const [createNote, { error: createError, isLoading: isCreating }] = useCreateNoteMutation();  // Хук для добавления заметки\r\n\r\n  // Эффект для загрузки заметок при монтировании компонента\r\n  useEffect(() => {\r\n    if (fetchedNotes) {\r\n      fetchedNotes.forEach(note => {\r\n        dispatch(addNote(note));  // Добавляем загруженные заметки в Redux\r\n      });\r\n    }\r\n  }, [fetchedNotes, dispatch]);\r\n\r\n  // Функция для добавления заметки\r\n  const handleAddNote = async () => {\r\n    if (newNoteContent.trim()) {  // Проверяем, не пустая ли заметка\r\n      const note = { content: newNoteContent };  // Создаем заметку\r\n      try {\r\n        const addedNote = await createNote(note).unwrap();  // Добавляем заметку через RTK Query\r\n        dispatch(addNote(addedNote));  // Добавляем заметку в Redux\r\n        setNewNoteContent('');  // Очищаем поле ввода\r\n      } catch (error) {\r\n        console.error('Ошибка при добавлении заметки:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notes-page\">\r\n      <h1>Notes Page</h1>\r\n      <div className=\"note-input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={newNoteContent}\r\n          onChange={(e) => setNewNoteContent(e.target.value)}  // Обновляем состояние ввода\r\n          placeholder=\"Введите заметку\"\r\n          className=\"note-input\"\r\n        />\r\n        <button onClick={handleAddNote} className=\"add-note-button\" disabled={isCreating}>\r\n          {isCreating ? 'Добавление...' : 'Добавить заметку'}\r\n        </button>\r\n      </div>\r\n      {isLoadingNotes && <div>Загрузка заметок...</div>}  {/* Индикатор загрузки */}\r\n      {fetchError && <div>Ошибка при загрузке заметок</div>}\r\n      <ul className=\"notes-list\">\r\n        {notes.map((note) => (\r\n          <li key={note.id} className=\"note-item\">\r\n            {note.content}  {/* Выводим содержимое заметки */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {createError && <div>Ошибка при добавлении заметки</div>}  {/* Индикатор ошибки */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotesPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}