{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { api } from '../../api'; // Подключаем API, чтобы использовать хук для авторизации\n\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  error: null,\n  username: ''\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout(state) {\n      state.isAuthenticated = false;\n      state.user = null;\n      state.error = null;\n      state.username = '';\n    },\n    clearError(state) {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addMatcher(api.endpoints.loginUser.matchFulfilled, (state, action) => {\n      const {\n        username\n      } = action.payload; // Получаем имя пользователя из ответа API\n      state.isAuthenticated = true;\n      state.user = username;\n      state.error = null;\n    }).addMatcher(api.endpoints.loginUser.matchRejected, (state, action) => {\n      state.error = 'Неправильный логин или пароль'; // Обрабатываем ошибку при авторизации\n    });\n  }\n});\nexport const {\n  logout,\n  clearError\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","api","initialState","isAuthenticated","user","error","username","authSlice","name","reducers","logout","state","clearError","extraReducers","builder","addMatcher","endpoints","loginUser","matchFulfilled","action","payload","matchRejected","actions","reducer"],"sources":["C:/Users/User/Desktop/kur/notes-app/src/redux/slices/authSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { api } from '../../api'; // Подключаем API, чтобы использовать хук для авторизации\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  error: null,\r\n  username: '',\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n      state.user = null;\r\n      state.error = null;\r\n      state.username = '';\r\n    },\r\n    clearError(state) {\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addMatcher(api.endpoints.loginUser.matchFulfilled, (state, action) => {\r\n        const { username } = action.payload; // Получаем имя пользователя из ответа API\r\n        state.isAuthenticated = true;\r\n        state.user = username;\r\n        state.error = null;\r\n      })\r\n      .addMatcher(api.endpoints.loginUser.matchRejected, (state, action) => {\r\n        state.error = 'Неправильный логин или пароль'; // Обрабатываем ошибку при авторизации\r\n      });\r\n  },\r\n});\r\n\r\nexport const { logout, clearError } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,WAAW,CAAC,CAAC;;AAEjC,MAAMC,YAAY,GAAG;EACnBC,eAAe,EAAE,KAAK;EACtBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACRC,MAAMA,CAACC,KAAK,EAAE;MACZA,KAAK,CAACR,eAAe,GAAG,KAAK;MAC7BQ,KAAK,CAACP,IAAI,GAAG,IAAI;MACjBO,KAAK,CAACN,KAAK,GAAG,IAAI;MAClBM,KAAK,CAACL,QAAQ,GAAG,EAAE;IACrB,CAAC;IACDM,UAAUA,CAACD,KAAK,EAAE;MAChBA,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDQ,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,UAAU,CAACd,GAAG,CAACe,SAAS,CAACC,SAAS,CAACC,cAAc,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACrE,MAAM;QAAEb;MAAS,CAAC,GAAGa,MAAM,CAACC,OAAO,CAAC,CAAC;MACrCT,KAAK,CAACR,eAAe,GAAG,IAAI;MAC5BQ,KAAK,CAACP,IAAI,GAAGE,QAAQ;MACrBK,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDU,UAAU,CAACd,GAAG,CAACe,SAAS,CAACC,SAAS,CAACI,aAAa,EAAE,CAACV,KAAK,EAAEQ,MAAM,KAAK;MACpER,KAAK,CAACN,KAAK,GAAG,+BAA+B,CAAC,CAAC;IACjD,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEK,MAAM;EAAEE;AAAW,CAAC,GAAGL,SAAS,CAACe,OAAO;AACvD,eAAef,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}